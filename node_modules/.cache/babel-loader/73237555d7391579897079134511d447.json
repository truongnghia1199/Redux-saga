{"ast":null,"code":"import { all, call, delay, fork, put, takeEvery, takeLatest } from \"redux-saga/effects\";\nimport { addUserError, loadUsersError, loadUsersSuccess } from \"./actions\";\nimport * as types from \"./actionTypes\";\nimport { addUserApi, loadUsersApi } from \"./api\";\nfun;\n\nfunction* onLoadUsersStartAsync() {\n  try {\n    const response = yield call(loadUsersApi);\n\n    if (response.status === 200) {\n      yield delay(500);\n      yield put(loadUsersSuccess(response.data));\n    }\n  } catch (error) {\n    yield put(loadUsersError(error.response.data));\n  }\n}\n\nfunction* onAddUserStartAsync({\n  payload\n}) {\n  try {\n    const response = yield call(addUserApi, payload);\n\n    if (response.status === 200) {\n      yield put(addUserError(response.data));\n    }\n  } catch (error) {\n    yield put(addUserError(error.response.data));\n  }\n}\n\nfunction* onLoadUsers() {\n  yield takeEvery(types.LOAD_USERS_START, onLoadUsersStartAsync);\n}\n\nfunction* onAddUser() {\n  yield takeLatest(types.ADD_USER_START, onAddUserStartAsync);\n}\n\nconst userSagas = [fork(onLoadUsers), fork(onAddUser)];\nexport default function* rootSaga() {\n  yield all([...userSagas]);\n}","map":{"version":3,"sources":["/home/nghiatt/React/git/redux-saga/src/redux/usersagas.js"],"names":["all","call","delay","fork","put","takeEvery","takeLatest","addUserError","loadUsersError","loadUsersSuccess","types","addUserApi","loadUsersApi","fun","onLoadUsersStartAsync","response","status","data","error","onAddUserStartAsync","payload","onLoadUsers","LOAD_USERS_START","onAddUser","ADD_USER_START","userSagas","rootSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,KAApB,EAA2BC,IAA3B,EAAiCC,GAAjC,EAAsCC,SAAtC,EAAiDC,UAAjD,QAAmE,oBAAnE;AACA,SAASC,YAAT,EAAuBC,cAAvB,EAAuCC,gBAAvC,QAA+D,WAA/D;AACA,OAAO,KAAKC,KAAZ,MAAuB,eAAvB;AACA,SAASC,UAAT,EAAqBC,YAArB,QAAyC,OAAzC;AAEAC,GAAG;;AAEH,UAAUC,qBAAV,GAAmC;AACjC,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMd,IAAI,CAACW,YAAD,CAA3B;;AACA,QAAGG,QAAQ,CAACC,MAAT,KAAoB,GAAvB,EAA4B;AAC1B,YAAMd,KAAK,CAAC,GAAD,CAAX;AACA,YAAME,GAAG,CAACK,gBAAgB,CAACM,QAAQ,CAACE,IAAV,CAAjB,CAAT;AACD;AACF,GAND,CAOA,OAAMC,KAAN,EAAa;AACX,UAAMd,GAAG,CAACI,cAAc,CAACU,KAAK,CAACH,QAAN,CAAeE,IAAhB,CAAf,CAAT;AACD;AACF;;AAED,UAAUE,mBAAV,CAA+B;AAACC,EAAAA;AAAD,CAA/B,EAA0C;AACxC,MAAI;AACF,UAAML,QAAQ,GAAG,MAAMd,IAAI,CAACU,UAAD,EAAaS,OAAb,CAA3B;;AACA,QAAGL,QAAQ,CAACC,MAAT,KAAoB,GAAvB,EAA4B;AAC1B,YAAMZ,GAAG,CAACG,YAAY,CAACQ,QAAQ,CAACE,IAAV,CAAb,CAAT;AACD;AACF,GALD,CAMA,OAAMC,KAAN,EAAa;AACX,UAAMd,GAAG,CAACG,YAAY,CAACW,KAAK,CAACH,QAAN,CAAeE,IAAhB,CAAb,CAAT;AACD;AACF;;AAED,UAAUI,WAAV,GAAyB;AACvB,QAAMhB,SAAS,CAACK,KAAK,CAACY,gBAAP,EAAwBR,qBAAxB,CAAf;AACD;;AAED,UAAUS,SAAV,GAAuB;AACrB,QAAMjB,UAAU,CAACI,KAAK,CAACc,cAAP,EAChBL,mBADgB,CAAhB;AAED;;AAED,MAAMM,SAAS,GAAG,CAACtB,IAAI,CAACkB,WAAD,CAAL,EAAoBlB,IAAI,CAACoB,SAAD,CAAxB,CAAlB;AAEA,eAAe,UAAUG,QAAV,GAAqB;AAClC,QAAM1B,GAAG,CAAC,CAAC,GAAGyB,SAAJ,CAAD,CAAT;AACD","sourcesContent":["import { all, call, delay, fork, put, takeEvery, takeLatest } from \"redux-saga/effects\"\nimport { addUserError, loadUsersError, loadUsersSuccess } from \"./actions\"\nimport * as types from \"./actionTypes\"\nimport { addUserApi, loadUsersApi } from \"./api\"\n\nfun\n\nfunction* onLoadUsersStartAsync () {\n  try {\n    const response = yield call(loadUsersApi)\n    if(response.status === 200) {\n      yield delay(500)\n      yield put(loadUsersSuccess(response.data))\n    }\n  } \n  catch(error) {\n    yield put(loadUsersError(error.response.data))\n  }\n}\n\nfunction* onAddUserStartAsync ({payload}) {\n  try {\n    const response = yield call(addUserApi, payload)\n    if(response.status === 200) {\n      yield put(addUserError(response.data))\n    }\n  } \n  catch(error) {\n    yield put(addUserError(error.response.data))\n  }\n}\n\nfunction* onLoadUsers () {\n  yield takeEvery(types.LOAD_USERS_START,onLoadUsersStartAsync)\n}\n\nfunction* onAddUser () {\n  yield takeLatest(types.ADD_USER_START,\n  onAddUserStartAsync)\n}\n\nconst userSagas = [fork(onLoadUsers), fork(onAddUser)]\n\nexport default function* rootSaga() {\n  yield all([...userSagas])\n}\n\n"]},"metadata":{},"sourceType":"module"}