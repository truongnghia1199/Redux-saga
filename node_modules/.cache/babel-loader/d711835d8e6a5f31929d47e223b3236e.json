{"ast":null,"code":"import { all, call, delay, fork, put, takeEvery } from \"redux-saga/effects\";\nimport { loadUsersError, loadUsersSuccess } from \"./actions\";\nimport * as types from \"./actionTypes\";\nimport { loadUsersApi } from \"./api\";\nexport function* onLoadUsersStartAsync() {\n  try {\n    const response = yield call(loadUsersApi);\n\n    if (response.status === 200) {\n      yield delay(500);\n      yield put(loadUsersSuccess(response.data));\n    }\n  } catch (error) {\n    yield put(loadUsersError(error.response.data));\n  }\n}\nexport function* onLoadUsers() {\n  yield takeEvery(types.LOAD_USERS_START, onLoadUsersStartAsync);\n}\nexport function* on() {\n  yield takeEvery(types.LOAD_USERS_START, onLoadUsersStartAsync);\n}\nconst userSagas = [fork(onLoadUsers)];\nexport default function* rootSaga() {\n  yield all([...userSagas]);\n}","map":{"version":3,"sources":["/home/nghiatt/React/git/redux-saga/src/redux/usersagas.js"],"names":["all","call","delay","fork","put","takeEvery","loadUsersError","loadUsersSuccess","types","loadUsersApi","onLoadUsersStartAsync","response","status","data","error","onLoadUsers","LOAD_USERS_START","on","userSagas","rootSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,KAApB,EAA2BC,IAA3B,EAAiCC,GAAjC,EAAsCC,SAAtC,QAAuD,oBAAvD;AACA,SAASC,cAAT,EAAyBC,gBAAzB,QAAiD,WAAjD;AACA,OAAO,KAAKC,KAAZ,MAAuB,eAAvB;AACA,SAASC,YAAT,QAA6B,OAA7B;AAEA,OAAO,UAAUC,qBAAV,GAAmC;AACxC,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMV,IAAI,CAACQ,YAAD,CAA3B;;AACA,QAAGE,QAAQ,CAACC,MAAT,KAAoB,GAAvB,EAA4B;AAC1B,YAAMV,KAAK,CAAC,GAAD,CAAX;AACA,YAAME,GAAG,CAACG,gBAAgB,CAACI,QAAQ,CAACE,IAAV,CAAjB,CAAT;AACD;AACF,GAND,CAOA,OAAMC,KAAN,EAAa;AACX,UAAMV,GAAG,CAACE,cAAc,CAACQ,KAAK,CAACH,QAAN,CAAeE,IAAhB,CAAf,CAAT;AACD;AACF;AAED,OAAO,UAAUE,WAAV,GAAyB;AAC9B,QAAMV,SAAS,CAACG,KAAK,CAACQ,gBAAP,EAAwBN,qBAAxB,CAAf;AACD;AAED,OAAO,UAAUO,EAAV,GAAgB;AACrB,QAAMZ,SAAS,CAACG,KAAK,CAACQ,gBAAP,EAAwBN,qBAAxB,CAAf;AACD;AAED,MAAMQ,SAAS,GAAG,CAACf,IAAI,CAACY,WAAD,CAAL,CAAlB;AAEA,eAAe,UAAUI,QAAV,GAAqB;AAClC,QAAMnB,GAAG,CAAC,CAAC,GAAGkB,SAAJ,CAAD,CAAT;AACD","sourcesContent":["import { all, call, delay, fork, put, takeEvery } from \"redux-saga/effects\"\nimport { loadUsersError, loadUsersSuccess } from \"./actions\"\nimport * as types from \"./actionTypes\"\nimport { loadUsersApi } from \"./api\"\n\nexport function* onLoadUsersStartAsync () {\n  try {\n    const response = yield call(loadUsersApi)\n    if(response.status === 200) {\n      yield delay(500)\n      yield put(loadUsersSuccess(response.data))\n    }\n  } \n  catch(error) {\n    yield put(loadUsersError(error.response.data))\n  }\n}\n\nexport function* onLoadUsers () {\n  yield takeEvery(types.LOAD_USERS_START,onLoadUsersStartAsync)\n}\n\nexport function* on () {\n  yield takeEvery(types.LOAD_USERS_START,onLoadUsersStartAsync)\n}\n\nconst userSagas = [fork(onLoadUsers)]\n\nexport default function* rootSaga() {\n  yield all([...userSagas])\n}\n\n"]},"metadata":{},"sourceType":"module"}