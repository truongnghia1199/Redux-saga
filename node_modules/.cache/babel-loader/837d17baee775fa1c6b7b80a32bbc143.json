{"ast":null,"code":"import { all, call, delay, fork, put, takeEvery, takeLatest, take } from \"redux-saga/effects\";\nimport { addUserError, deleteUserSuccess, loadUsersError, loadUsersSuccess, deleteUserError } from \"./actions\";\nimport * as types from \"./actionTypes\";\nimport { addUserApi, loadUsersApi, deleteUserApi } from \"./api\"; // function load user\n\nfunction* onLoadUsersStartAsync() {\n  try {\n    const response = yield call(loadUsersApi);\n\n    if (response.status === 200) {\n      yield delay(500);\n      yield put(loadUsersSuccess(response.data));\n    }\n  } catch (error) {\n    yield put(loadUsersError(error.response.data));\n  }\n}\n\nfunction* onLoadUsers() {\n  yield takeEvery(types.LOAD_USERS_START, onLoadUsersStartAsync);\n} // function add user\n\n\nfunction* onAddUserStartAsync({\n  payload\n}) {\n  try {\n    const response = yield call(addUserApi, payload);\n\n    if (response.status === 200) {\n      yield put(addUserError(response.data));\n    }\n  } catch (error) {\n    yield put(addUserError(error.response.data));\n  }\n}\n\nfunction* onAddUser() {\n  yield takeLatest(types.ADD_USER_START, onAddUserStartAsync);\n} // function delete user\n\n\nfunction* onDeleteUserStartAsync({\n  userId\n}) {\n  try {\n    const response = yield call(deleteUserApi, userId);\n\n    if (response.status === 200) {\n      yield delay(500);\n      yield put(deleteUserSuccess(userId));\n    }\n  } catch (error) {\n    yield put(deleteUserError(error.response.data));\n  }\n}\n\nfunction* onDeleteUser() {\n  while (true) {\n    const {\n      payload: userId\n    } = yield take(types.DELETE_USER_START);\n    yield call(onDeleteUserStartAsync, userId);\n  }\n}\n\nconst userSagas = [fork(onLoadUsers), fork(onAddUser), fork(onUser)];\nexport default function* rootSaga() {\n  yield all([...userSagas]);\n}","map":{"version":3,"sources":["/home/nghiatt/React/git/redux-saga/src/redux/usersagas.js"],"names":["all","call","delay","fork","put","takeEvery","takeLatest","take","addUserError","deleteUserSuccess","loadUsersError","loadUsersSuccess","deleteUserError","types","addUserApi","loadUsersApi","deleteUserApi","onLoadUsersStartAsync","response","status","data","error","onLoadUsers","LOAD_USERS_START","onAddUserStartAsync","payload","onAddUser","ADD_USER_START","onDeleteUserStartAsync","userId","onDeleteUser","DELETE_USER_START","userSagas","onUser","rootSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,KAApB,EAA2BC,IAA3B,EAAiCC,GAAjC,EAAsCC,SAAtC,EAAiDC,UAAjD,EAA6DC,IAA7D,QAAyE,oBAAzE;AACA,SAASC,YAAT,EAAuBC,iBAAvB,EAA0CC,cAA1C,EAA0DC,gBAA1D,EAA4EC,eAA5E,QAAmG,WAAnG;AACA,OAAO,KAAKC,KAAZ,MAAuB,eAAvB;AACA,SAASC,UAAT,EAAqBC,YAArB,EAAmCC,aAAnC,QAAwD,OAAxD,C,CAEA;;AAEA,UAAUC,qBAAV,GAAmC;AACjC,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMjB,IAAI,CAACc,YAAD,CAA3B;;AACA,QAAGG,QAAQ,CAACC,MAAT,KAAoB,GAAvB,EAA4B;AAC1B,YAAMjB,KAAK,CAAC,GAAD,CAAX;AACA,YAAME,GAAG,CAACO,gBAAgB,CAACO,QAAQ,CAACE,IAAV,CAAjB,CAAT;AACD;AACF,GAND,CAOA,OAAMC,KAAN,EAAa;AACX,UAAMjB,GAAG,CAACM,cAAc,CAACW,KAAK,CAACH,QAAN,CAAeE,IAAhB,CAAf,CAAT;AACD;AACF;;AAED,UAAUE,WAAV,GAAyB;AACvB,QAAMjB,SAAS,CAACQ,KAAK,CAACU,gBAAP,EAAwBN,qBAAxB,CAAf;AACD,C,CAGD;;;AAGA,UAAUO,mBAAV,CAA+B;AAACC,EAAAA;AAAD,CAA/B,EAA0C;AACxC,MAAI;AACF,UAAMP,QAAQ,GAAG,MAAMjB,IAAI,CAACa,UAAD,EAAaW,OAAb,CAA3B;;AACA,QAAGP,QAAQ,CAACC,MAAT,KAAoB,GAAvB,EAA4B;AAC1B,YAAMf,GAAG,CAACI,YAAY,CAACU,QAAQ,CAACE,IAAV,CAAb,CAAT;AACD;AACF,GALD,CAMA,OAAMC,KAAN,EAAa;AACX,UAAMjB,GAAG,CAACI,YAAY,CAACa,KAAK,CAACH,QAAN,CAAeE,IAAhB,CAAb,CAAT;AACD;AACF;;AAED,UAAUM,SAAV,GAAuB;AACrB,QAAMpB,UAAU,CAACO,KAAK,CAACc,cAAP,EAChBH,mBADgB,CAAhB;AAED,C,CAGD;;;AACA,UAAUI,sBAAV,CAAkC;AAACC,EAAAA;AAAD,CAAlC,EAA4C;AAC1C,MAAI;AACF,UAAMX,QAAQ,GAAG,MAAMjB,IAAI,CAACe,aAAD,EAAgBa,MAAhB,CAA3B;;AACA,QAAGX,QAAQ,CAACC,MAAT,KAAoB,GAAvB,EAA4B;AAC1B,YAAMjB,KAAK,CAAC,GAAD,CAAX;AACA,YAAME,GAAG,CAACK,iBAAiB,CAACoB,MAAD,CAAlB,CAAT;AACD;AACF,GAND,CAOA,OAAMR,KAAN,EAAa;AACX,UAAMjB,GAAG,CAACQ,eAAe,CAACS,KAAK,CAACH,QAAN,CAAeE,IAAhB,CAAhB,CAAT;AACD;AACF;;AACD,UAAUU,YAAV,GAA0B;AACxB,SAAM,IAAN,EAAY;AACV,UAAM;AAACL,MAAAA,OAAO,EAAGI;AAAX,QAAqB,MAAMtB,IAAI,CAACM,KAAK,CAACkB,iBAAP,CAArC;AACA,UAAM9B,IAAI,CAAC2B,sBAAD,EAAyBC,MAAzB,CAAV;AACD;AAEF;;AAMD,MAAMG,SAAS,GAAG,CAAC7B,IAAI,CAACmB,WAAD,CAAL,EAAoBnB,IAAI,CAACuB,SAAD,CAAxB,EAAqCvB,IAAI,CAAC8B,MAAD,CAAzC,CAAlB;AAEA,eAAe,UAAUC,QAAV,GAAqB;AAClC,QAAMlC,GAAG,CAAC,CAAC,GAAGgC,SAAJ,CAAD,CAAT;AACD","sourcesContent":["import { all, call, delay, fork, put, takeEvery, takeLatest, take } from \"redux-saga/effects\"\nimport { addUserError, deleteUserSuccess, loadUsersError, loadUsersSuccess, deleteUserError } from \"./actions\"\nimport * as types from \"./actionTypes\"\nimport { addUserApi, loadUsersApi, deleteUserApi } from \"./api\"\n\n// function load user\n\nfunction* onLoadUsersStartAsync () {\n  try {\n    const response = yield call(loadUsersApi)\n    if(response.status === 200) {\n      yield delay(500)\n      yield put(loadUsersSuccess(response.data))\n    }\n  } \n  catch(error) {\n    yield put(loadUsersError(error.response.data))\n  }\n}\n\nfunction* onLoadUsers () {\n  yield takeEvery(types.LOAD_USERS_START,onLoadUsersStartAsync)\n}\n\n\n// function add user\n\n\nfunction* onAddUserStartAsync ({payload}) {\n  try {\n    const response = yield call(addUserApi, payload)\n    if(response.status === 200) {\n      yield put(addUserError(response.data))\n    }\n  } \n  catch(error) {\n    yield put(addUserError(error.response.data))\n  }\n}\n\nfunction* onAddUser () {\n  yield takeLatest(types.ADD_USER_START,\n  onAddUserStartAsync)\n}\n\n\n// function delete user\nfunction* onDeleteUserStartAsync ({userId}) {\n  try {\n    const response = yield call(deleteUserApi, userId)\n    if(response.status === 200) {\n      yield delay(500)\n      yield put(deleteUserSuccess(userId))\n    }\n  } \n  catch(error) {\n    yield put(deleteUserError(error.response.data))\n  }\n}\nfunction* onDeleteUser () {\n  while(true) {\n    const {payload : userId} = yield take(types.DELETE_USER_START)\n    yield call(onDeleteUserStartAsync, userId)\n  }\n\n}\n\n\n\n\n\nconst userSagas = [fork(onLoadUsers), fork(onAddUser), fork(onUser)]\n\nexport default function* rootSaga() {\n  yield all([...userSagas])\n}\n\n"]},"metadata":{},"sourceType":"module"}