{"ast":null,"code":"import { all, call, delay, fork, put, takeEvery, takeLatest } from \"redux-saga/effects\";\nimport { addUserError, loadUsersError, loadUsersSuccess } from \"./actions\";\nimport * as types from \"./actionTypes\";\nimport { addUserApi, loadUsersApi } from \"./api\"; // function load user\n\nfunction* onLoadUsersStartAsync() {\n  try {\n    const response = yield call(loadUsersApi);\n\n    if (response.status === 200) {\n      yield delay(500);\n      yield put(loadUsersSuccess(response.data));\n    }\n  } catch (error) {\n    yield put(loadUsersError(error.response.data));\n  }\n}\n\nfunction* onLoadUsers() {\n  yield takeEvery(types.LOAD_USERS_START, onLoadUsersStartAsync);\n} // function add user\n\n\nfunction* onAddUserStartAsync({\n  payload\n}) {\n  try {\n    const response = yield call(addUserApi, payload);\n\n    if (response.status === 200) {\n      yield put(addUserError(response.data));\n    }\n  } catch (error) {\n    yield put(addUserError(error.response.data));\n  }\n}\n\nfunction* onAddUser() {\n  yield takeLatest(types.ADD_USER_START, onAddUserStartAsync);\n} // function delete user\n\n\nfunction* onDeleteUserStartAsync({\n  userId\n}) {\n  try {\n    const response = yield call(deleteUserApi, payload);\n\n    if (response.status === 200) {\n      yield put(deleteUserError(response.data));\n    }\n  } catch (error) {\n    yield put(deleteUserError(error.response.data));\n  }\n}\n\nfunction* onDeleteUser() {\n  while (true) {\n    const {\n      payload: userId\n    } = yield take(types.DELETE_USER_START);\n    yield call(ondeleteUserStartAsync, userId);\n  }\n}\n\nconst userSagas = [fork(onLoadUsers), fork(onAddUser)];\nexport default function* rootSaga() {\n  yield all([...userSagas]);\n}","map":{"version":3,"sources":["/home/nghiatt/React/git/redux-saga/src/redux/usersagas.js"],"names":["all","call","delay","fork","put","takeEvery","takeLatest","addUserError","loadUsersError","loadUsersSuccess","types","addUserApi","loadUsersApi","onLoadUsersStartAsync","response","status","data","error","onLoadUsers","LOAD_USERS_START","onAddUserStartAsync","payload","onAddUser","ADD_USER_START","onDeleteUserStartAsync","userId","deleteUserApi","deleteUserError","onDeleteUser","take","DELETE_USER_START","ondeleteUserStartAsync","userSagas","rootSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,KAApB,EAA2BC,IAA3B,EAAiCC,GAAjC,EAAsCC,SAAtC,EAAiDC,UAAjD,QAAmE,oBAAnE;AACA,SAASC,YAAT,EAAuBC,cAAvB,EAAuCC,gBAAvC,QAA+D,WAA/D;AACA,OAAO,KAAKC,KAAZ,MAAuB,eAAvB;AACA,SAASC,UAAT,EAAqBC,YAArB,QAAyC,OAAzC,C,CAEA;;AAEA,UAAUC,qBAAV,GAAmC;AACjC,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMb,IAAI,CAACW,YAAD,CAA3B;;AACA,QAAGE,QAAQ,CAACC,MAAT,KAAoB,GAAvB,EAA4B;AAC1B,YAAMb,KAAK,CAAC,GAAD,CAAX;AACA,YAAME,GAAG,CAACK,gBAAgB,CAACK,QAAQ,CAACE,IAAV,CAAjB,CAAT;AACD;AACF,GAND,CAOA,OAAMC,KAAN,EAAa;AACX,UAAMb,GAAG,CAACI,cAAc,CAACS,KAAK,CAACH,QAAN,CAAeE,IAAhB,CAAf,CAAT;AACD;AACF;;AAED,UAAUE,WAAV,GAAyB;AACvB,QAAMb,SAAS,CAACK,KAAK,CAACS,gBAAP,EAAwBN,qBAAxB,CAAf;AACD,C,CAGD;;;AAGA,UAAUO,mBAAV,CAA+B;AAACC,EAAAA;AAAD,CAA/B,EAA0C;AACxC,MAAI;AACF,UAAMP,QAAQ,GAAG,MAAMb,IAAI,CAACU,UAAD,EAAaU,OAAb,CAA3B;;AACA,QAAGP,QAAQ,CAACC,MAAT,KAAoB,GAAvB,EAA4B;AAC1B,YAAMX,GAAG,CAACG,YAAY,CAACO,QAAQ,CAACE,IAAV,CAAb,CAAT;AACD;AACF,GALD,CAMA,OAAMC,KAAN,EAAa;AACX,UAAMb,GAAG,CAACG,YAAY,CAACU,KAAK,CAACH,QAAN,CAAeE,IAAhB,CAAb,CAAT;AACD;AACF;;AAED,UAAUM,SAAV,GAAuB;AACrB,QAAMhB,UAAU,CAACI,KAAK,CAACa,cAAP,EAChBH,mBADgB,CAAhB;AAED,C,CAGD;;;AACA,UAAUI,sBAAV,CAAkC;AAACC,EAAAA;AAAD,CAAlC,EAA4C;AAC1C,MAAI;AACF,UAAMX,QAAQ,GAAG,MAAMb,IAAI,CAACyB,aAAD,EAAgBL,OAAhB,CAA3B;;AACA,QAAGP,QAAQ,CAACC,MAAT,KAAoB,GAAvB,EAA4B;AAC1B,YAAMX,GAAG,CAACuB,eAAe,CAACb,QAAQ,CAACE,IAAV,CAAhB,CAAT;AACD;AACF,GALD,CAMA,OAAMC,KAAN,EAAa;AACX,UAAMb,GAAG,CAACuB,eAAe,CAACV,KAAK,CAACH,QAAN,CAAeE,IAAhB,CAAhB,CAAT;AACD;AACF;;AACD,UAAUY,YAAV,GAA0B;AACxB,SAAM,IAAN,EAAY;AACV,UAAM;AAACP,MAAAA,OAAO,EAAGI;AAAX,QAAqB,MAAMI,IAAI,CAACnB,KAAK,CAACoB,iBAAP,CAArC;AACA,UAAM7B,IAAI,CAAC8B,sBAAD,EAAyBN,MAAzB,CAAV;AACD;AAEF;;AAMD,MAAMO,SAAS,GAAG,CAAC7B,IAAI,CAACe,WAAD,CAAL,EAAoBf,IAAI,CAACmB,SAAD,CAAxB,CAAlB;AAEA,eAAe,UAAUW,QAAV,GAAqB;AAClC,QAAMjC,GAAG,CAAC,CAAC,GAAGgC,SAAJ,CAAD,CAAT;AACD","sourcesContent":["import { all, call, delay, fork, put, takeEvery, takeLatest } from \"redux-saga/effects\"\nimport { addUserError, loadUsersError, loadUsersSuccess } from \"./actions\"\nimport * as types from \"./actionTypes\"\nimport { addUserApi, loadUsersApi } from \"./api\"\n\n// function load user\n\nfunction* onLoadUsersStartAsync () {\n  try {\n    const response = yield call(loadUsersApi)\n    if(response.status === 200) {\n      yield delay(500)\n      yield put(loadUsersSuccess(response.data))\n    }\n  } \n  catch(error) {\n    yield put(loadUsersError(error.response.data))\n  }\n}\n\nfunction* onLoadUsers () {\n  yield takeEvery(types.LOAD_USERS_START,onLoadUsersStartAsync)\n}\n\n\n// function add user\n\n\nfunction* onAddUserStartAsync ({payload}) {\n  try {\n    const response = yield call(addUserApi, payload)\n    if(response.status === 200) {\n      yield put(addUserError(response.data))\n    }\n  } \n  catch(error) {\n    yield put(addUserError(error.response.data))\n  }\n}\n\nfunction* onAddUser () {\n  yield takeLatest(types.ADD_USER_START,\n  onAddUserStartAsync)\n}\n\n\n// function delete user\nfunction* onDeleteUserStartAsync ({userId}) {\n  try {\n    const response = yield call(deleteUserApi, payload)\n    if(response.status === 200) {\n      yield put(deleteUserError(response.data))\n    }\n  } \n  catch(error) {\n    yield put(deleteUserError(error.response.data))\n  }\n}\nfunction* onDeleteUser () {\n  while(true) {\n    const {payload : userId} = yield take(types.DELETE_USER_START)\n    yield call(ondeleteUserStartAsync, userId)\n  }\n\n}\n\n\n\n\n\nconst userSagas = [fork(onLoadUsers), fork(onAddUser)]\n\nexport default function* rootSaga() {\n  yield all([...userSagas])\n}\n\n"]},"metadata":{},"sourceType":"module"}